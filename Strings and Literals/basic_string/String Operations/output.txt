***************************************************************************
copy (char* s, size_t n, size_t p = 0)
[khrisha rao].copy("xxxxxxx", 7)						 = 7
result										 = "khrisha"
***************************************************************************

***************************************************************************
find (const string& s, size_t p = 0)
[khrisha rao].find([ rao])							 = 7

find (const char* s, size_t p = 0)
[khrisha rao].find(" rao")							 = 7

find (const char* s, size_t p, size_t n)
[khrisha rao].find(" rao", 0, 4)						 = 7

find (char c, size_t p = 0)
[khrisha rao].find('r')								 = 2
***************************************************************************

***************************************************************************
rfind (const string& s, size_t p = npos)
[khrisha rao].rfind([ rao])							 = 7

rfind (const char* s, size_t p = npos)
[khrisha rao].rfind(" rao")							 = 7

rfind (const char* s, size_t p, size_t n)
[khrisha rao].rfind(" rao", string::npos, 4)					 = 7

rfind (const char* s, size_t p = npos)
[khrisha rao].rfind('r')							 = 8
***************************************************************************

***************************************************************************
find_first_of(const string& s, size_t p = 0)
[khrisha rao].find_first_of([ rao])						 = 2

find_first_of(const char* s, size_t p = 0)
[khrisha rao].find_first_of(" rao")						 = 2

find_first_of(const char* s, size_t p, size_t n)
[khrisha rao].find_first_of(" rao", 0, 4)					 = 2

find_first_of(char c, size_t p = 0)
[khrisha rao].find_first_of('r')						 = 2
***************************************************************************

***************************************************************************
find_last_of(const string& s, size_t p = npos)
[khrisha rao].find_last_of([ rao])						 = 10

find_last_of(const char* s, size_t p = npos)
[khrisha rao].find_last_of(" rao")						 = 10

find_last_of(const char* s, size_t p, size_t n)
[khrisha rao].find_last_of(" rao", string::npos, 4)				 = 10

find_last_of(char c, size_t p = npos)
[khrisha rao].find_last_of('r')							 = 8
***************************************************************************

***************************************************************************
find_first_not_of(const string& s, size_t p = 0)
[khrisha rao].find_first_not_of([ rao])						 = 0

find_first_not_of(const char* s, size_t p = 0)
[khrisha rao].find_first_not_of(" rao")						 = 0

find_first_not_of(const char* s, size_t p, size_t n)
[khrisha rao].find_first_not_of(" rao", 0, 4)					 = 0

find_first_not_of(char c, size_t p = 0)
[khrisha rao].find_first_not_of('r')						 = 0
***************************************************************************

***************************************************************************
find_last_not_of(const string& s, size_t p = npos)
[khrisha rao].find_last_not_of([ rao])						 = 5

find_last_not_of(const char* s, size_t p = npos)
[khrisha rao].find_last_not_of(" rao")						 = 5

find_last_not_of(const char* s, size_t p, size_t n)
[khrisha rao].find_last_not_of(" rao", string::npos, 4)				 = 5

find_last_not_of(char c, size_t p = npos)
[khrisha rao].find_last_not_of('r')						 = 10
***************************************************************************

***************************************************************************
compare (const string& s)
[khrisha rao].compare([khrisha])						 = 4

compare (size_t p, size_t n, const string& s)
[khrisha rao].compare(7, 4, [ rao])						 = 0

compare (size_t p, size_t n, const string& s, size_t sp, size_t  sn)
[khrisha rao].compare(0, 4, [khrisha], 0, string::npos)				 = -3

compare (const char* s)
[khrisha rao].compare("khrisha")						 = 4

compare (size_t p, size_t n, const char* s)
[khrisha rao].compare(7, 4, " rao")						 = 0

compare (size_t p, size_t n, const char* s, size_t n)
[khrisha rao].compare(0, 4, "khrisha", 5)					 = -1
***************************************************************************

***************************************************************************
substr (size_t p = 0, size_t n = npos)
[khrisha rao].substr(0, 7)							 = [khrisha]

[khrisha rao].substr(8)								 = [rao]
***************************************************************************
