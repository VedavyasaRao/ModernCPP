make_heap  ([1,2,3,4,5,6,7].begin(), [1,2,3,4,5,6,7].end())
Return:	[{7} {5, 6} {4, 2, 1, 3}]

make_heap  ([1,2,3,4,5,6,7].begin(), [1,2,3,4,5,6,7].end(), greater<int>())
Return:	[{1} {2, 3} {4, 5, 6, 7}]

sort_heap  ([{7} {5, 6} {4, 2, 1, 3}].begin(), [{7} {5, 6} {4, 2, 1, 3}].end())
Return:	[1, 2, 3, 4, 5, 6, 7]

sort_heap  ([{1} {2, 3} {4, 5, 6, 7}].begin(), [{1} {2, 3} {4, 5, 6, 7}].end(), greater<int>())
Return:	[7, 6, 5, 4, 3, 2, 1]

is_heap ([{1} {2, 3} {4, 5, 6, 7}].begin(), [{1} {2, 3} {4, 5, 6, 7}].end())
Return:	false

is_heap ([{1} {2, 3} {4, 5, 6, 7}].begin(), [{1} {2, 3} {4, 5, 6, 7}].end(), greater<int>())
Return:	true

pop_heap ([{7} {5, 6} {4, 2, 1, 3}].begin(), [{7} {5, 6} {4, 2, 1, 3}].end())
Return:	[6, 5, 3, 4, 2, 1, 7]

is_heap_until ([{6} {5, 4} {1, 3, 2}, 7].begin(), [{6} {5, 4} {1, 3, 2}, 7].end())
Return:	[6, 5, 3, 4, 2, 1, X].begin()+6

push_heap ([{6} {5, 4} {2, 1, 3}, 7].begin(), [{6} {5, 4} {2, 1, 3}, 7].end())
Return:	[{7} {5, 6} {4, 2, 1, 3}]

pop_heap ([{1} {2, 3} {4, 5, 6, 7}].begin(), [{1} {2, 3} {4, 5, 6, 7}].end(), greater<int>())
Return:	[2, 4, 3, 7, 5, 6, 1]

is_heap_until ([{2} {3, 4} {5, 6, 7}, 1].begin(), [{2} {3, 4} {5, 6, 7}, 1].end(), greater<int>())
Return:	[2, 4, 3, 7, 5, 6, X].begin()+6

push_heap ([{2} {3, 4} {5, 6, 7}, 1].begin(), [{2} {3, 4} {5, 6, 7}, 1].end(), greater<int>())
Return:	[{1} {4, 2} {7, 5, 6, 3}]
