all_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), isodd)
Return:	false

all_of([1, 3].begin(), [1, 3].end(), isodd)
Return:	true

any_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), isodd)
Return:	true

any_of([2, 4].begin(), [2, 4].end(), isodd)
Return:	false

none_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), isodd)
Return:	false

none_of([2, 4].begin(), [2, 4].end(), isodd)
Return:	true

for_each([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), print)
Result:	1 2 3 4 

find([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), 2)
Return:	[1, 2, 3, 4].begin()+1

find([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), 5)
Return:	[1, 2, 3, 4].end()

find_if([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), isodd)
Return:	[1, 2, 3, 4].begin()+0

find_if([2, 4].begin(), [2, 4].end(), isodd)
Return:	[2, 4].end()

find_end([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [2, 3].begin(), [2, 3].end())
Return:	[1, 2, 3, 2, 3].begin()+3

find_end([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [1, 3].begin(), [1, 3].end())
Return:	[1, 2, 3, 2, 3].end()

find_end([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [2, 3].begin(), [2, 3].end(), issame)
Return:	[1, 2, 3, 2, 3].begin()+3

find_end([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [1, 3].begin(), [1, 3].end(), issame)
Return:	[1, 2, 3, 2, 3].end()

find_first_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 3].begin(), [1, 3].end())
Return:	[1, 2, 3, 4].begin()+0

find_first_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [5, 6].begin(), [5, 6].end())
Return:	[1, 2, 3, 4].end()

find_first_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 3].begin(), [1, 3].end(), issame)
Return:	[1, 2, 3, 4].begin()+0

find_first_of([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [5, 6].begin(), [5, 6].end(), issame)
Return:	[1, 2, 3, 4].end()

adjacent_find([1, 2, 2, 3].begin(), [1, 2, 2, 3].end())
Return:	[1, 2, 2, 3].begin()+1

adjacent_find([1, 2, 3, 4].begin(), [1, 2, 3, 4].end())
Return:	[1, 2, 3, 4].end()

adjacent_find([1, 2, 2, 3].begin(), [1, 2, 2, 3].end(), issame)
Return:	[1, 2, 2, 3].begin()+1

adjacent_find([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), issame)
Return:	[1, 2, 3, 4].end()

count([1, 2, 2, 3].begin(), [1, 2, 2, 3].end(), 2)
Return:	2

count([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), 3)
Return:	2

count([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), 4)
Return:	0

count_if([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), isodd)
Return:	2

count_if([2, 4].begin(), [2, 4].end(), isodd)
Return:	0

mismatch([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 2, 3].begin())
Return:	{[1, 2, 3, 4].begin()+2 , [1, 2, 2, 3].begin()+2}

mismatch( [1, 2].begin(), [1, 2].end(), [1, 2, 3, 4].begin())
Return:	{[1, 2].end() , [1, 2, 3, 4].begin()+2}

mismatch([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 3, 4].begin())
Return:	{[1, 2, 3, 4].end() , [1, 2, 3, 4].end()}

mismatch([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 2, 3].begin(), issame)
Return:	{[1, 2, 3, 4].begin()+2 , [1, 2, 2, 3].begin()+2}

mismatch( [1, 2].begin(), [1, 2].end(), [1, 2, 3, 4].begin(), issame)
Return:	{[1, 2].end() , [1, 2, 3, 4].begin()+2}

mismatch([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 3, 4].begin(), issame)
Return:	{[1, 2, 3, 4].end() , [1, 2, 3, 4].end()}

equal([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 3, 4].begin(), [1, 2, 3, 4].end())
Return:	true

equal([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2].begin(), [1, 2].end())
Return:	false

equal([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), issame)
Return:	true

equal([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2].begin(), [1, 2].end(), issame)
Return:	false

is_permutation ([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [4, 3, 2, 1].begin(), [4, 3, 2, 1].end())
Return:	true

is_permutation([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2].begin(), [1, 2].end())
Return:	false

is_permutation ([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [4, 3, 2, 1].begin(), [4, 3, 2, 1].end(), issame)
Return:	true

is_permutation([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2].begin(), [1, 2].end(), issame)
Return:	false

equal([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2, 3, 4].begin(), [1, 2, 3, 4].end())
Return:	true

equal([1, 2, 3, 4].begin(), [1, 2, 3, 4].end(), [1, 2].begin(), [1, 2].end())
Return:	false

search([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [2, 3].begin(), [2, 3].end())
Return:	[1, 2, 3, 2, 3].begin()+1

search([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [2, 2].begin(), [2, 2].end())
Return:	[1, 2, 3, 2, 3].end()

search([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [2, 3].begin(), [2, 3].end(), issame)
Return:	[1, 2, 3, 2, 3].begin()+1

search([1, 2, 3, 2, 3].begin(), [1, 2, 3, 2, 3].end(), [2, 2].begin(), [2, 2].end(), issame)
Return:	[1, 2, 3, 2, 3].end()

search_n([1, 2, 2, 3].begin(), [1, 2, 2, 3].end(), 2, 2)
Return:	[1, 2, 2, 3].begin()+1

search_n([1, 2, 2, 3].begin(), [1, 2, 2, 3].end(), 3, 3)
Return:	[1, 2, 2, 3].end()

search_n([1, 2, 2, 3].begin(), [1, 2, 2, 3].end(), 2, 2), issame
Return:	[1, 2, 2, 3].begin()+1

search_n([1, 2, 2, 3].begin(), [1, 2, 2, 3].end(), 3, 3, issame)
Return:	[1, 2, 2, 3].end()
